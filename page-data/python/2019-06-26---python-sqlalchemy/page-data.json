{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/2019-06-26---python-sqlalchemy/","result":{"data":{"site":{"siteMetadata":{"title":"Ulfrid_log","author":"[ulfrid]","siteUrl":"https://ulfrid.github.io","comment":{"disqusShortName":"ulfrid-github-io","utterances":""},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"51e50ce7-697b-59c8-babd-b47516c3e201","excerpt":"sqlalchemy는? python에서 사용가능한 ORM(Object-relational maping)이다.  ORM은 말그대로 객체(Object)와 관계(Relation)를 연결해주는것이다. 데이터베이스의 데이터를 <—매핑—> Object필드 장점 객체 지향적인 코드로 비즈니스 로직에 집중가능 재사용 및 유지보수 편리성이 증가 DBMS에 대한 종속성이 줄어듬. 단점 ORM 만으로 서비스를 구현하기 어려움.  프로시저가 많은 시스템에서는 장점을 가져가기 어려움. ORM이 더 궁금하시다면, ORM…","html":"<p><img src=\"/media/sqlalchemy.jpg\"></p>\n<h1 id=\"sqlalchemy는\"><a href=\"#sqlalchemy%EB%8A%94\" aria-label=\"sqlalchemy는 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sqlalchemy는?</h1>\n<ul>\n<li><strong>python</strong>에서 사용가능한 <em>ORM</em>(Object-relational maping)이다. </li>\n<li>ORM은 말그대로 객체(Object)와 관계(Relation)를 연결해주는것이다.</li>\n<li>데이터베이스의 데이터를 &#x3C;—매핑—> Object필드</li>\n<li>\n<p>장점</p>\n<ol>\n<li>객체 지향적인 코드로 비즈니스 로직에 집중가능</li>\n<li>재사용 및 유지보수 편리성이 증가</li>\n<li>DBMS에 대한 종속성이 줄어듬.</li>\n</ol>\n</li>\n<li>\n<p>단점</p>\n<ol>\n<li>ORM 만으로 서비스를 구현하기 어려움. </li>\n<li>프로시저가 많은 시스템에서는 장점을 가져가기 어려움.</li>\n</ol>\n</li>\n<li>ORM이 더 궁금하시다면, <a href=\"https://gmlwjd9405.github.io/2019/02/01/orm.html\">ORM이란 - 권희정님 블로그</a></li>\n<li>\n<p>sqlalchemy 에 대해 잘 파악하려면 역시 공식 기술문서를 보는게 정석!</p>\n<p>공식문서<a href=\"https://www.sqlalchemy.org/\">sql alchemy 공식사이트</a></p>\n<p>그 외 이해도를 높이기 위해 블로그 검색을 통해 진행했다.</p>\n</li>\n<li>인스톨은 pip로 심플하게~ </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">  pip install sqlalchemy</code></pre></div>\n<ul>\n<li>DB를 사용하려면 파이썬 파일 혹은 인터프리터 환경에서 해볼 수 있다. </li>\n<li>DB는 SQLite3 버전을 사용했다.</li>\n<li>처음은 당연히 임포트로 시작하고, create_engine이라는 메소드로 DB를 정의한다.</li>\n<li>SQLite라서 매우 간단하지만, 다른 DB라면 별도의 접속정보를 명기해야한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">  from sqlalchemy import create_engine\n\n  engine = create_engine(&#39;sqlite://&quot;/지정하고 싶은 파일명.db&quot;&#39;, echo=True)\n  # 위 명령이 DB에 바로 연결시키는건 아니고, 이제 메모리에 인식 시키는 상황이다. \n  # echo=True는 찍히는 쿼리를 볼 수 있다.</code></pre></div>\n<p>위와 같이 DB에 정의를 했다면,</p>\n<p>이제 테이블을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Base <span class=\"token operator\">=</span> declarative_base<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Movie</span><span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    __tablename__ <span class=\"token operator\">=</span> <span class=\"token string\">'movies'</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    date <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span>\n    rank <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span>\n    movieNm <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    movieCd <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span>\n    salesAmt <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span>\n    audiCnt <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span>\n\nMovie<span class=\"token punctuation\">.</span>__table__<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>engine<span class=\"token punctuation\">,</span> checkfirst<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>테이블 생성은 위에서와 같이 선언형을 베이스로 하고,\n클래스가 테이블을 의미하는게 아니라, 클래스에 넣고\n<code class=\"language-text\">__tablename__</code>에 정의해야 원하는 테이블 명으로 맵핑이 이루어진다.</p>\n<p>코드 마지막 줄에 ‘Movie.<strong>table</strong>.create()‘가 있어야 실질적으로 생성을 한다.</p>\n<p>그래서 다음에 든 생각은 이제 테이블을 만들었으니, 그냥 무언가를 테이블에 맞춰서 add()하면 되지 않을까 했지만,\n그것은 경기도 오산 이었다.(죄송합니다;;)</p>\n<p>생성한 DB에 데이터 처리를 하려면, sessionmaker를 이용해야 하는것이었다.</p>\n<p>세션이라는 단어로인해, 마치 네트웍적인 접근이라 생각하고 처음에 무시했는데, DB와 대화하려면\n생성해야 하는 절차였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm <span class=\"token keyword\">import</span> sessionmaker\nSession <span class=\"token operator\">=</span> sessionmaker<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>engine<span class=\"token punctuation\">)</span>\nsession <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음과 같은 코드를 통해 세션을 생성하고, 생성해둔 엔진(DB)을 연결한다.</p>\n<p>이후에 데이터를 인서트 하기위해 데이터를 꾸리고, </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">movie_list<span class=\"token operator\">=</span>Movie<span class=\"token punctuation\">(</span>date<span class=\"token operator\">=</span><span class=\"token number\">20190625</span><span class=\"token punctuation\">,</span> rank<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> movieNm<span class=\"token operator\">=</span><span class=\"token string\">'토이 스토리4'</span><span class=\"token punctuation\">,</span> movieCd<span class=\"token operator\">=</span><span class=\"token number\">12345</span><span class=\"token punctuation\">,</span> salesAmt<span class=\"token operator\">=</span><span class=\"token number\">1234545123</span><span class=\"token punctuation\">,</span>audiCnt<span class=\"token operator\">=</span><span class=\"token number\">342</span><span class=\"token punctuation\">)</span>\n\nsession<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>movie_list<span class=\"token punctuation\">)</span>\nsession<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>커밋까지 진행해야 실질적으로 데이터 인서트가 이루어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python db.py\n<span class=\"token number\">2019</span>-06-26 <span class=\"token number\">10</span>:21:45,563 INFO sqlalchemy.engine.base.Engine SELECT CAST<span class=\"token punctuation\">(</span><span class=\"token string\">'test plain returns'</span> AS VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">))</span> AS anon_1\n<span class=\"token number\">2019</span>-06-26 <span class=\"token number\">10</span>:21:45,564 INFO sqlalchemy.engine.base.Engine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2019</span>-06-26 <span class=\"token number\">10</span>:21:45,564 INFO sqlalchemy.engine.base.Engine SELECT CAST<span class=\"token punctuation\">(</span><span class=\"token string\">'test unicode returns'</span> AS VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">))</span> AS anon_1\n<span class=\"token number\">2019</span>-06-26 <span class=\"token number\">10</span>:21:45,564 INFO sqlalchemy.engine.base.Engine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2019</span>-06-26 <span class=\"token number\">10</span>:21:45,564 INFO sqlalchemy.engine.base.Engine PRAGMA table_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"movies\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2019</span>-06-26 <span class=\"token number\">10</span>:21:45,564 INFO sqlalchemy.engine.base.Engine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2019</span>-06-26 <span class=\"token number\">10</span>:21:45,565 INFO sqlalchemy.engine.base.Engine BEGIN <span class=\"token punctuation\">(</span>implicit<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2019</span>-06-26 <span class=\"token number\">10</span>:21:45,568 INFO sqlalchemy.engine.base.Engine INSERT INTO movies <span class=\"token punctuation\">(</span>date, rank, <span class=\"token string\">\"movieNm\"</span>, <span class=\"token string\">\"movieCd\"</span>, <span class=\"token string\">\"salesAmt\"</span>, <span class=\"token string\">\"audiCnt\"</span><span class=\"token punctuation\">)</span> VALUES <span class=\"token punctuation\">(</span>?, ?, ?, ?, ?, ?<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2019</span>-06-26 <span class=\"token number\">10</span>:21:45,568 INFO sqlalchemy.engine.base.Engine <span class=\"token punctuation\">(</span><span class=\"token number\">20190625</span>, <span class=\"token number\">1</span>, <span class=\"token string\">'토이 스토리4'</span>, <span class=\"token number\">12345</span>, <span class=\"token number\">1234545123</span>, <span class=\"token number\">342</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2019</span>-06-26 <span class=\"token number\">10</span>:21:45,573 INFO sqlalchemy.engine.base.Engine COMMIT</code></pre></div>\n<p>코드가 실행되고 echo=True로 인해 진행 사항이 찍힌 화면. </p>\n<p>만약 잘 입력이 됐는지 확인하고 싶다면, session.query(Movie).all()과 같이 불러온 뒤, 반복문으로 돌면서 프린트 해보면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\">result <span class=\"token operator\">=</span> session<span class=\"token operator\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>Movie<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">:</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>row<span class=\"token operator\">.</span>date<span class=\"token punctuation\">,</span>row<span class=\"token operator\">.</span>rank<span class=\"token punctuation\">,</span>row<span class=\"token operator\">.</span>movieNm<span class=\"token punctuation\">,</span>row<span class=\"token operator\">.</span>movieCd<span class=\"token punctuation\">,</span>row<span class=\"token operator\">.</span>salesAmt<span class=\"token punctuation\">,</span>row<span class=\"token operator\">.</span>audiCnt<span class=\"token punctuation\">)</span></code></pre></div>\n<p>결과는 생략한다. 위와 같이 수행해본 결과들을 정리했다.</p>\n<p>아직 모든 기능을 파악한 것은 아니지만, 확실히 장고 ORM과 비교해보면 좀 더 수동적인 절차가 있다고 느껴진다.\n마치 오토 차를 타다 수동차로 바꿔타는 느낌~</p>\n<p>일단 이번 회차의 파악은 여기서 종료 한다. 아마도 다음에 글을 쓰게 되면 더 능숙해졌거나 더 삽질을 하게 되서 정리하게 될것 같다.</p>\n<p>기본적인 인서트와 셀렉트를 다루었고, 아직 조인을 해야할 상황을 마주한적은 없어서 현재는 동기부여가 없지만, 조만간 학습해서 정리해 보도록 해야겠다.</p>\n<p>이상 정리 끄읏~~~</p>\n<p>— 참고자료 —</p>\n<p>위지원님 블로그 <a href=\"https://weejw.tistory.com/37\">https://weejw.tistory.com/37</a></p>\n<p>김용균님 블로그 <a href=\"https://edykim.com/ko/post/getting-started-with-sqlalchemy-part-2/\">https://edykim.com/ko/post/getting-started-with-sqlalchemy-part-2/</a></p>\n<p>공식문서는 위에 링크 참고.</p>","frontmatter":{"title":"SQLAlchemy 그것이 알고싶다","date":"June 26, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python/2019-06-26---python-sqlalchemy/","previous":{"fields":{"slug":"/python/python-settings/"},"frontmatter":{"title":"Python 환경 설정 하기","category":"python"}},"next":{"fields":{"slug":"/python/fluent-python-정리하기/"},"frontmatter":{"title":"Fluent Python 정리하기","category":"python"}}}}}