{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/2019-06-13---re-python/","result":{"data":{"site":{"siteMetadata":{"title":"Ulfrid_log","author":"[ulfrid]","siteUrl":"https://ulfrid.github.io","comment":{"disqusShortName":"ulfrid-github-io","utterances":""},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"414f1a2a-9a72-5723-af84-a32299c91ad2","excerpt":"Boost your Python!!! 이번 기회에 파이썬을 다시 정리하며, 나의 약점을 정리하고자 한다. 1. 리스트 순회 (정확히는 리스트를 활용한 데이터의 비교) 파이썬을 공부하기에 앞서 프로그래밍 기초에서도 이 부분을 해결하려는 로직에 대한 두뇌속 사고가 아직 자연스럽지가 않다는걸 많이 느낌. 위와 같은 문제를 푸는 것과 같은 부분에는 다양한 방법이 있으나, 메소드를 쓰면 간단히 풀수 있으나, 메소드를 제약하고  순수하게 문제를 해결하는 부분에 대해서는 아직 갈길이 멀다라고 좌절함.…","html":"<p><img src=\"/media/python.png\"></p>\n<h1 id=\"boost-your-python\"><a href=\"#boost-your-python\" aria-label=\"boost your python permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boost your Python!!!</h1>\n<h2 id=\"이번-기회에-파이썬을-다시-정리하며-나의-약점을-정리하고자-한다\"><a href=\"#%EC%9D%B4%EB%B2%88-%EA%B8%B0%ED%9A%8C%EC%97%90-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EC%A0%95%EB%A6%AC%ED%95%98%EB%A9%B0-%EB%82%98%EC%9D%98-%EC%95%BD%EC%A0%90%EC%9D%84-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B3%A0%EC%9E%90-%ED%95%9C%EB%8B%A4\" aria-label=\"이번 기회에 파이썬을 다시 정리하며 나의 약점을 정리하고자 한다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번 기회에 파이썬을 다시 정리하며, 나의 약점을 정리하고자 한다.</h2>\n<h2 id=\"1-리스트-순회-정확히는-리스트를-활용한-데이터의-비교\"><a href=\"#1-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%88%9C%ED%9A%8C-%EC%A0%95%ED%99%95%ED%9E%88%EB%8A%94-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%B9%84%EA%B5%90\" aria-label=\"1 리스트 순회 정확히는 리스트를 활용한 데이터의 비교 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 리스트 순회 (정확히는 리스트를 활용한 데이터의 비교)</h2>\n<ul>\n<li>파이썬을 공부하기에 앞서 프로그래밍 기초에서도 이 부분을 해결하려는 로직에 대한 두뇌속 사고가 아직 자연스럽지가 않다는걸 많이 느낌.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">#와 같은 예시가 있다. 해당 리스트의 중복되지 않은 수만 출력하는 함수를 작성하시오.</span>\n    \n  <span class=\"token comment\">#사실 별다른 방도가 생각이 안나서 결국 </span>\n    my_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>s <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> my_list<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">if</span> my_list<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#카운트 함수로 품 </span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    \n  <span class=\"token comment\">#아래는 모델 솔루션이고,        </span>\n    my_list       <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>s <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    current_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> my_list<span class=\"token punctuation\">:</span>\n      is_unique <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n      list_without_current_element <span class=\"token operator\">=</span> my_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>current_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> my_list<span class=\"token punctuation\">[</span>current_index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n      \n      <span class=\"token keyword\">for</span> element2 <span class=\"token keyword\">in</span> list_without_current_element<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> element <span class=\"token operator\">==</span> element2<span class=\"token punctuation\">:</span>\n          is_unique <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n          <span class=\"token keyword\">break</span>\n        \n      <span class=\"token keyword\">if</span> is_unique<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n        \n      current_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<ul>\n<li>위와 같은 문제를 푸는 것과 같은 부분에는 다양한 방법이 있으나, 메소드를 쓰면 간단히 풀수 있으나, 메소드를 제약하고  순수하게 문제를 해결하는 부분에 대해서는 아직 갈길이 멀다라고 좌절함.</li>\n</ul>\n<h2 id=\"2-function-parameter\"><a href=\"#2-function-parameter\" aria-label=\"2 function parameter permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Function parameter</h2>\n<ul>\n<li>해당 문제는 포지셔널 파라미터 와 키워드 파라미터에 대한 이해를 시작으로, 파라미터에 디폴트 밸류를 설정시의 주의할 점이\n정리 되어야 했다.\n포지셔널 파라미터는 말그대로 순서대로 들어와야 하며, 키워드 파라미터는 인자의 이름을 따라가서 위치에 영향을 받지 않는다.\n하지만, 함수에 넘길때 디폴트 밸류를 앞에 인자에만 넘기면 문법적인 오류가 나게 되는데. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>example1 <span class=\"token operator\">=</span> <span class=\"token string\">'아이유'</span><span class=\"token punctuation\">,</span> example2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>example1<span class=\"token punctuation\">}</span></span><span class=\"token string\"> loves </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>example2<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>와 같이 함수가 선언되고 인자를 한개만 넘기게 되면, 당연히 우리는 기본인자가 들어있는 example1을 지나치고 example2에\n할당될것 같지만, 인자는 순서대로 전달되기 때문에, 키워드, 포지션 상관없이 디폴트 밸류의 선언을 앞에 했다면, 뒤에도 해줘야하며, 그렇게 하지않으면, 함수가 호출될 시에 인자 전달을 할때 어디에 해야할지 알 수 없어 에러가 나게 된다.</p>\n<h2 id=\"3-decorator\"><a href=\"#3-decorator\" aria-label=\"3 decorator permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Decorator</h2>\n<ul>\n<li>\n<p>데코레이터는 파이썬 장고를 쓰면서 흔하게 접할수 있는데 바로 데코레이터 모듈을 써서 처리하는 과정들이 있는데,\n별 다른 생각없이 하나의 방식으로 이해하고 사용하다가, 직접 구현을 해보니. 뿌리 깊은 이해를 할 수 있었다.</p>\n<p>데코레이터의 역할은 단순하게 접근하면, 특정 함수의 실행 전에 먼저 수행하여, 함수의 실행 전 후에 추가적인 동작\n을 할수 있게 해주는 역할을 해주는 함수하고 생각할 수 있다. 하지만 머리로 이해하는 것과 실제 실행은 너무도\n달랐기 때문에 온몸으로 부딪쳐서 이해해본 결과. 다음과 같은 결론을 얻었다.</p>\n<p>데코레이터는 함수이지만, 직접적인 실행이 아닌 내부함수(클로저)를 통해서만 실행이 된다.\n따라서 실행하려는 로직은 단순히 함수로만 생각하기보다는 처리가 되는 순서에 대해 잘 생각을 해봐야 했다.\n검색을 통해 알 수 있는 부분은 기본적으로 @example과 같은 메인 함수 위에 적용한 데코레이터(장식자)를\n붙이게 되면, 데코레이터는 함수를 로드하여 정해진 로직을 통해(내부함수 안에서)이루어진 리턴을 반영하고 이후\n메인함수를 실행한다.</p>\n<p>단순히 함수를 넘겨 처리하는 부분은 금방 이해가 갔으나, 인자를 하나 받아 넘기는 데코레이터의 경우 다양한 궁금증이 생길 수 밖에 없었는데. 이유는 이러한 예제는 찾기가 어렵기도 했고, 찾았다고 해도 바로 이해하기는 어려움이 있었다.</p>\n<p>먼저 데코레이터는 기본적으로 선언된 함수를 강제로 받아 넘기기 때문에 당연히 넘어오게 되어 있지만, 어떻게 받아서\n일차적으로 받지 않으면 어떻게 해야할지 이해가 어려웠는데, 많은 시행착오 끝에 함수와 매개변수를 처리하려면,\n최종적인 함수 수행의 처리는 가장 마지막에 이루어져야하고, 인자를 받아서 넘기기 위해 우선적으로 인자를 받고, 이후에 함수를 받고, 이후의 내부함수에서 함수 및 인자의 가공이 가능하다는 것을 확실하게 인식하게 되었다.</p>\n<p>처음에는 떨어지는 에러코드를 처리해가며, 어떻게 해야 해결이 가능한지에만 급급했지만, 그로인해 넘어오지 않는 인자를\n어떻게든 받아보려고, *args, **kwargs(쓰지도 않음) 등을 넣어서 넘기기도 하고, 함수가 받아졌으나, 담기지 않아\n바로 넘기니 메모리 주소가 반환되기도 하고, 다양한 실패경험 후 원하는 작업이 이루어져야 할 단계 및 순서를 명확하게 이해할 수 있었다. </p>\n<p>말로만 정리를 해서 코드적으로 이해가 다가오지 않을수 있으니, 이후에는 새로운 데코레이터 예제를 생성하여, 다시 기술하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">name_decorator</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        message <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> message<span class=\"token operator\">+</span>param\n    <span class=\"token keyword\">return</span> inner\n<span class=\"token keyword\">return</span> wrapper\n\n@name_decorator<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, \"</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"4-dictionary의-성질-이해\"><a href=\"#4-dictionary%EC%9D%98-%EC%84%B1%EC%A7%88-%EC%9D%B4%ED%95%B4\" aria-label=\"4 dictionary의 성질 이해 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Dictionary의 성질 이해.</h2>\n<ul>\n<li>딕셔너리는 단순히 키:밸류로 이루어진 (HashMap)자료형으로 생각했으나, 이에 대한 생성 및 삭제에 대해서는 잘\n정리하지 못 했던 것 같다.\n딕셔너리의 할당의 순서는 먼저 빈 {}를 변수에 할당. 이후 변수명[“키”] = 밸류 의 순서로 할당된다.\n네스티드 될 때에도 바로 주입이 아닌 키에 {} 공간 할당 후 다시 키를 대입하여 새로운 뎁스로 할당이 가능하다.\n문제는 언제나, 익숙하다고 아는 척이나 하고, 실제로 사용하려고 하면 자료를 찾아보고 있는 모습이다.\n삭제는 del 이나 .pop() 등이 있다.\n검색은 키로 가능하고, 밸류로도 가능하다.\n보통 데이터의 여부는 in, not in, .get() 등으로 확인 가능하다.</li>\n</ul>\n<h2 id=\"각-자료형-별-컴프리헨션\"><a href=\"#%EA%B0%81-%EC%9E%90%EB%A3%8C%ED%98%95-%EB%B3%84-%EC%BB%B4%ED%94%84%EB%A6%AC%ED%97%A8%EC%85%98\" aria-label=\"각 자료형 별 컴프리헨션 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>각 자료형 별 컴프리헨션</h2>\n<ul>\n<li>이 부분은 아직 수업으로는 진행하지 못했지만, 별도로 정리하려고 한다.\n기본적으로 시퀀스 자료형이면서 수정이 가능한 리스트와 딕셔너리로 진행한다.\n</li>\n</ul>","frontmatter":{"title":"다시 Python3 정리","date":"June 13, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python/2019-06-13---re-python/","previous":{"fields":{"slug":"/development/re-javascript2/"},"frontmatter":{"title":"다시 자바스크립트 정리2","category":"development"}},"next":{"fields":{"slug":"/python/fluent-python-정리하기/"},"frontmatter":{"title":"Fluent Python 정리하기","category":"python"}}}}}